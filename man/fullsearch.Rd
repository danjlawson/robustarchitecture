% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ArchitectureModel.R
\name{fullsearch}
\alias{fullsearch}
\title{Search s for the best parameter}
\usage{
fullsearch(
  dat,
  bins = defaultbins(),
  thresholds = c(2.5, 3),
  sigma = NULL,
  method = c("linesearch", "optimize"),
  nlinesearch = 2,
  nline = 21,
  range = c(-2, 2)
)
}
\arguments{
\item{dat}{A data frame of (f,beta) pairs}

\item{bins}{(Default: \code{\link{defaultbins}}) the histogram bins to use}

\item{thresholds}{(Default :\code{\link{defaultthresholds}}) the tail areas to compare (in s.d units).}

\item{sigma}{(Default: NULL, meaning use the best value) Genomic architecture sigma. Don't change unless you know what you are doing...}

\item{method}{(Default: c("linesearch","optimize")) The set of all methods to use (out of "linesearch", "optimize" and "Brent"). Good values are c("linesearch","optimize"), which tries to find global maxima, and "Brent" which tries to find a local maxima only, but is slightly faster. Only specify up to one of "Brent" and "optimize".}

\item{nlinesearch}{(Defaul: 1) Number of linesearch parameters to evaluate, controlling the resolution near the edges of the valid range.}

\item{nline}{(Defaul: 21) Number of linesearch parameters to evaluate in .}

\item{range}{(Default: c(-2,2)) The lower and upper bounds provided to \code{\link{linesearch}} to find a region that returns a finite score.}
}
\value{
A list as returned by the optimiser, with additionally \code{dat}, \code{thresholds}, \code{bins}, \code{range} and \code{sigma} as provided, and \code{s} as inferred.
}
\description{
Optimize \code{\link{lossfunctionp}}. For basic usage, just give \code{dat}
and it should do everything else for you. You sometimes have to
change \code{thresholds} to fit the shape of your data; check this with
\code{\link{architectureplot}}.

This is a 1-D non-convex optimization problem. The first challenge is that many
parameters don't have a finite loss, so we first do a \code{\link{linesearch}}
to identify a valid range.

We then either do a sequence of linesearches to arrive at a region, or go straight for a
convex optimizer ("optimize" or "Brent" from \code{\link[stats]{optim}}). Line searches
are slower but cope better with small datasets.
}
\seealso{
\code{\link{linesearch}} to explore a range of s, or \code{\link{bootstrap}} to generate a distribution of estimates of s.
}
